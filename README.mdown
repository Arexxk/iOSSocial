iOSSocial
=======

iOSSocial is a collection of classes that makes it easy to integrate with one or more popular social networks. Includes OAuth authentication support for each service out-of-the box via view controllers and saving of OAuth tokens in the keychain. The underlying data model makes it possible for you to easily build your own UI as well.

Supported services:

OAuth 2- Instagram, Foursquare

OAuth 1 - Twitter

Coming soon: Facebook (OAuth2)!

Supported iOS platforms: iOS 4, iOS 5

Community
=========

Hopefully coming soon!

Adding iOSSocial to your project
==============================

iOSSocial is compiled as a static library. To use it in your project, do the following:

- Build the project on its own or add it to your application's project/workspace.
- Link your application against libiOSSocial.a, Security.framework, and SystemConfiguration.framework
- Include the appropriate headers: LocalInstagramUser.h, LocalFoursquareUser.h, and/or LocalTwitterUser.h
- Call assignOAuthParams: on the local user object of the service that you want to integrate with.
- Call isAuthenticated on the local user object of the service to see if the user has already authorized your app.
- Call authenticateWithScope:fromViewController:withCompletionHandler: on the local user object of the service to present the OAuth Login View Controller to the user. If successful, the error returned by the completion handler will be nil.
- Call logout on the local user object of the service to blow out the local OAuth goodies.
  
An Overview of iOSSocial
======================
    
iOSSServicesViewController
------------

Use iOSSServicesViewController to present a list of supported services to the user. The controller is evolving, but for now, it shows a list of available services to connect to (based on the services you choose to configure. Read below on services.):

[![](http://dl.dropbox.com/u/5390704/Screenshot_6.png)](http://dl.dropbox.com/u/5390704/Screenshot_6.png)

When a service is chosen, the OAuth page for the service is shown:

[![](http://dl.dropbox.com/u/5390704/Screenshot_7.png)](http://dl.dropbox.com/u/5390704/Screenshot_7.png)

If the user authenticates for the service, their user account is shown as connected under the accounts section:

[![](http://dl.dropbox.com/u/5390704/Screenshot_8.png)](http://dl.dropbox.com/u/5390704/Screenshot_8.png)

Selecting an already connected account logs the user out of that account (ie, clears out their locally stored OAuth access token for their account on the given service). Selected a disconnected account will let the user log back in:

[![](http://dl.dropbox.com/u/5390704/Screenshot_9.png)](http://dl.dropbox.com/u/5390704/Screenshot_9.png)

Here is the code in action:

<pre><code>
iOSSServicesViewController *iossServicesViewController = [[iOSSServicesViewController alloc] init];
iossServicesViewController.serviceControllerDelegate = self;
[self.navigationController pushViewController:iossServicesViewController animated:YES];
           
</pre></code>

Services
------------   

Which services you want to use is up to you. The underlying code will automatically pick-up which services are available based on what you configure. It is recommended that the services be configured in your application delegate before calling any other code. Here is an example of how the Instagram, Twitter, and Foursquare services are configured in an application delegate:

<pre><code>
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
	// Note: For Instagram, when setting the object for the kSMOAuth2RedirectURI key in the OAuth params
	// dictionary, the URL specified MUST match the callback URL you specified when you created your 
	// Instagram application on their site. It doesn't matter what the URL actually points to, but 
	// the value specified here HAS to match what you specified when you created your Instagram app.
	NSMutableDictionary *params = [NSMutableDictionary dictionary];
	[params setObject:@"instagram app client id" forKey:kSMOAuth2ClientID];
	[params setObject:@"instagram app client secret" forKey:kSMOAuth2ClientSecret];
	[params setObject:@"instagram app callback" forKey:kSMOAuth2RedirectURI];
	[params setObject:@"unique name for keychain item" forKey:kSMOAuth2KeychainItemName];
	[params setObject:@"https://api.instagram.com/oauth/authorize" forKey:kSMOAuth2AuthorizeURL];
	[params setObject:@"https://api.instagram.com/oauth/access_token" forKey:kSMOAuth2AccessTokenURL];
	[params setObject:@"Instagram Service" forKey:kSMOAuth2ServiceProviderName];
	[params setObject:@"basic comments relationships likes" forKey:kSMOAuth2Scope];
	[[Instagram sharedService] assignOAuthParams:params asPrimary:YES];

	[params removeAllObjects];

	[params setObject:@"twitter app client id" forKey:kSMOAuth1ClientID];
	[params setObject:@"twitter app client secret" forKey:kSMOAuth1ClientSecret];
	[params setObject:@"twitter app callback" forKey:kSMOAuth1RedirectURI];
	[params setObject:@"unique name for keychain item" forKey:kSMOAuth1KeychainItemName];
	[params setObject:@"https://api.twitter.com/oauth/request_token" forKey:kSMOAuth1RequestTokenURL];
	[params setObject:@"https://api.twitter.com/oauth/access_token" forKey:kSMOAuth1AccessTokenURL];
	[params setObject:@"https://api.twitter.com/oauth/authorize" forKey:kSMOAuth1AuthorizeURL];
	[params setObject:@"Twitter Service" forKey:kSMOAuth1ServiceProviderName];
	[[Twitter sharedService] assignOAuthParams:params asPrimary:NO];

	[params removeAllObjects];

	[params setObject:@"foursquare app client id" forKey:kSMOAuth2ClientID];
	[params setObject:@"foursquare app client secret" forKey:kSMOAuth2ClientSecret];
	[params setObject:@"foursquare app callback" forKey:kSMOAuth2RedirectURI];
	[params setObject:@"unique name for keychain item" forKey:kSMOAuth2KeychainItemName];
	[params setObject:@"https://foursquare.com/oauth2/authorize" forKey:kSMOAuth2AuthorizeURL];
	[params setObject:@"https://foursquare.com/oauth2/access_token" forKey:kSMOAuth2AccessTokenURL];
	[params setObject:@"Foursquare Service" forKey:kSMOAuth2ServiceProviderName];
	[[Foursquare sharedService] assignOAuthParams:params asPrimary:NO];

	...
}
</pre></code>

Local User Accounts
------------

Local user accounts...blah blah

<pre><code>
	
id<iOSSocialLocalUserProtocol> localUser = [[iOSSocialServicesStore sharedServiceStore] defaultAccount];

BOOL isAuthenticated = [localUser isAuthenticated];

// The OAuth View Controller is shown modally from the current view controller so pass in 'self' for the 'fromViewController' param.

[localUser authenticateFromViewController:self 
                                       withCompletionHandler:^(NSError *error){
                                              if (error) {
                                              } else {
													NSString *accessToken = [localUser oAuthAccessToken];
                                              }
                                          }];

// Logging out is easy peasy. Note that this does NOT revoke the user's access to the actual service on their site. It just clears out 
// all of the local OAuth goodies.
[localUser logout];

</pre></code>