iOSSocial
=======

iOSSocial is a collection of classes that makes it easy to integrate with one or more popular social networks. Includes OAuth authentication support for each service out-of-the box via view controllers and saving of OAuth tokens in the keychain. The underlying data model makes it possible for you to easily build your own UI as well.

Supported services

OAuth 2
- Instagram
- Foursquare

OAuth 1
- Twitter

Coming soon: Facebook (OAuth2)!

Supported iOS platforms: iOS 4, iOS 5

Community
=========

Hopefully coming soon!

Adding iOSSocial to your project
==============================

iOSSocial is compiled as a static library. To use it in your project, do the following:

- Build the project on its own or add it to your application's project/workspace.
- Link your application against libiOSSocial.a, Security.framework, and SystemConfiguration.framework
- Include the appropriate headers: LocalInstagramUser.h, LocalFoursquareUser.h, and/or LocalTwitterUser.h
- Call assignOAuthParams: on the local user object of the service that you want to integrate with.
- Call isAuthenticated on the local user object of the service to see if the user has already authorized your app.
- Call authenticateWithScope:fromViewController:withCompletionHandler: on the local user object of the service to present the OAuth Login View Controller to the user. If successful, the error returned by the completion handler will be nil.
- Call logout on the local user object of the service to blow out the local OAuth goodies.
  
An Overview of iOSSocial
======================
    
iOSSServicesViewController
------------

Use iOSSServicesViewController to present a list of supported services to the user. The controller is evolving, but for now, it shows a list of available services to connect to (based on the services you choose to configure. Read below on services.):

[![](http://dl.dropbox.com/u/5390704/Screenshot_6.png)](http://dl.dropbox.com/u/5390704/Screenshot_6.png)

When a service is chosen, the OAuth page for the service is shown:

[![](http://dl.dropbox.com/u/5390704/Screenshot_7.png)](http://dl.dropbox.com/u/5390704/Screenshot_7.png)

If the user authenticates for the service, their user account is shown as connected under the accounts section:

[![](http://dl.dropbox.com/u/5390704/Screenshot_8.png)](http://dl.dropbox.com/u/5390704/Screenshot_8.png)

Selecting an already connected account logs the user out of that account (ie, clears out their locally stored OAuth access token for their account on the given service). Selected a disconnected account will let the user log back in:

[![](http://dl.dropbox.com/u/5390704/Screenshot_9.png)](http://dl.dropbox.com/u/5390704/Screenshot_9.png)

<pre><code>
#import "iOSSServicesViewController.h"

iOSSServicesViewController *iossServicesViewController = [[iOSSServicesViewController alloc] init];
iossServicesViewController.serviceControllerDelegate = self;
[self.navigationController pushViewController:iossServicesViewController animated:YES];
           
</pre></code>

[![](http://dl.dropbox.com/u/5390704/Screenshot_1.png)](http://dl.dropbox.com/u/5390704/Screenshot_1.png)

   
Instagram
------------

http://instagram.com/developer/auth/
<pre><code>
#import "LocalInstagramUser.h"

// Note: For Instagram, when setting the object for the kSMOAuth2RedirectURI key in the OAuth params
// dictionary, the URL specified MUST match the callback URL you specified when you created your 
// Instagram application on their site. It doesn't matter what the URL actually points to, but 
// the value specified here HAS to match what you specified when you created your Instagram app.

NSMutableDictionary *params = [NSMutableDictionary dictionary];
[params setObject:@"Instagram Client ID for your Application" forKey:kSMOAuth2ClientID];
[params setObject:@"Instagram Client Secret for your Application" forKey:kSMOAuth2ClientSecret];
[params setObject:@"Instagram Callback for your Application" forKey:kSMOAuth2RedirectURI];
[params setObject:@"Instagram Keychain name of your choosing" forKey:kSMOAuth2KeychainItemName];
[params setObject:@"Instagram OAuth Authorize URL" forKey:kSMOAuth2AuthorizeURL];
[params setObject:@"Instagram OAuth Access Token URL" forKey:kSMOAuth2AccessTokenURL];
[params setObject:@"Instagram Service name of your choosing" forKey:kSMOAuth2ServiceProviderName];
[params setObject:@"basic comments relationships likes" forKey:kSMOAuth2Scope];
[[LocalInstagramUser localInstagramUser] assignOAuthParams:params];

BOOL isAuthenticated = [[LocalInstagramUser localInstagramUser] isAuthenticated];

// The OAuth View Controller is shown modally from the current view controller so pass in 'self' for the 'fromViewController' param.

// These are the available scopes for Instagram. They MUST be separated by a space!!!
NSString *scope = @"basic comments relationships likes";
[[LocalInstagramUser localInstagramUser] authenticateWithScope:scope  
                                            fromViewController:self 
                                         withCompletionHandler:^(NSError *error){
                                             if (!error) {
                                                 NSString *accessToken = [[LocalInstagramUser localInstagramUser] oAuthAccessToken];
                                             }}];

// Logging out is easy peasy. Note that this does NOT revoke the user's access to the actual service on their site. It just clears out 
// all of the local OAuth goodies.
[[LocalInstagramUser localInstagramUser] logout];

</pre></code>

Twitter
-----------------------

https://dev.twitter.com/docs/auth
<pre><code>
#import "LocalTwitterUser.h"

NSMutableDictionary *params = [NSMutableDictionary dictionary];
[params setObject:@"Twitter Client ID for your Application" forKey:kSMOAuth1ClientID];
[params setObject:@"Twitter Client Secret for your Application" forKey:kSMOAuth1ClientSecret];
[params setObject:@"Twitter Callback for your Application" forKey:kSMOAuth1RedirectURI];
[params setObject:@"Twitter Keychain name of your choosing" forKey:kSMOAuth1KeychainItemName];
[params setObject:@"Twitter OAuth Authorize URL" forKey:kSMOAuth1RequestTokenURL];
[params setObject:@"Twitter OAuth Access Token URL" forKey:kSMOAuth1AccessTokenURL];
[params setObject:@"Twitter OAuth name of your choosing" forKey:kSMOAuth1AuthorizeURL];
[params setObject:@"Twitter Service" forKey:kSMOAuth1ServiceProviderName];
[[LocalTwitterUser localTwitterUser] assignOAuthParams:params];

BOOL isAuthenticated = [[LocalTwitterUser localTwitterUser] isAuthenticated];

// The OAuth View Controller is shown modally from the current view controller so pass in 'self' for the 'fromViewController' param.
// The scope for Twitter is set via their website so you can configure permissions there.

[[LocalTwitterUser localTwitterUser] authenticateWithScope:nil  
                                        fromViewController:self 
                                     withCompletionHandler:^(NSError *error){
                                         if (!error) {
										     NSString *accessToken = [[LocalTwitterUser localTwitterUser] oAuthAccessToken];
                                         }}];

// Logging out is easy peasy. Note that this does NOT revoke the user's access to the actual service on their site. It just clears out 
// all of the local OAuth goodies.
[[LocalTwitterUser localTwitterUser] logout];
</pre></code>

Foursquare
-----------------------

https://developer.foursquare.com/merchant/oauth.html
<pre><code>
#import "LocalFoursquareUser.h"

NSMutableDictionary *params = [NSMutableDictionary dictionary];
[params setObject:@"Foursquare Client ID for your Application"" forKey:kSMOAuth2ClientID];
[params setObject:@"Foursquare Client Secret for your Application" forKey:kSMOAuth2ClientSecret];
[params setObject:@"Foursquare Callback for your Application" forKey:kSMOAuth2RedirectURI];
[params setObject:@"Foursquare Keychain name of your choosing" forKey:kSMOAuth2KeychainItemName];
[params setObject:@"Foursquare OAuth Authorize URL" forKey:kSMOAuth2AuthorizeURL];
[params setObject:@"Foursquare OAuth Access Token URL" forKey:kSMOAuth2AccessTokenURL];
[params setObject:@"Foursquare Service name of your choosing" forKey:kSMOAuth2ServiceProviderName];
[[LocalFoursquareUser localFoursquareUser] assignOAuthParams:params];

BOOL isAuthenticated = [[LocalFoursquareUser localFoursquareUser] isAuthenticated];

// The OAuth View Controller is shown modally from the current view controller so pass in 'self' for the 'fromViewController' param.

NSString *scope = @"";
[[LocalFoursquareUser localFoursquareUser] authenticateWithScope:scope 
                                              fromViewController:self 
                                           withCompletionHandler:^(NSError *error){
                                               if (!error) {
                                                   NSString *accessToken = [[LocalFoursquareUser localFoursquareUser] oAuthAccessToken];
                                               }}];

// Logging out is easy peasy. Note that this does NOT revoke the user's access to the actual service on their site. It just clears out 
// all of the local OAuth goodies.
[[LocalFoursquareUser localFoursquareUser] logout];

</pre></code>